#!/usr/bin/env ruby
# rubocop:disable Metrics/BlockNesting
# rubocop:disable Metrics/CyclomaticComplexity
# rubocop:disable Metrics/PerceivedComplexity
class Board
  def print_board(sym1, sym2, arr1, arr2)
    (1..9).each do |i|
      if arr1.include?(i)
        print " #{sym1} "
      elsif arr2.include?(i)
        print " #{sym2} "
      else
        print " #{i} "
      end
      print '|' unless (i % 3).zero?
      puts "\n" if (i % 3).zero?
    end
  end
end

# def board(sym1, sym2, arr1, arr2)
#   (1..9).each do |i|
#     if arr1.include?(i)
#       print " #{sym1} "
#     elsif arr2.include?(i)
#       print " #{sym2} "
#     else
#       print " #{i} "
#     end
#     print '|' unless (i % 3).zero?
#     puts "\n" if (i % 3).zero?
#   end
# end

def validmove(move, arr1, arr2)
  return false unless [1, 2, 3, 4, 5, 6, 7, 8, 9].include?(move)
  return false unless !arr1.include?(move) && !arr2.include?(move)

  true
end

def checkwin(move, arr)
  if move != 6 && move != 8
    return true if arr.include?(1) && arr.include?(4) && arr.include?(7)

    return true if arr.include?(1) && arr.include?(5) && arr.include?(9)

    return true if arr.include?(1) && arr.include?(2) && arr.include?(3)

    return true if arr.include?(3) && arr.include?(5) && arr.include?(7)

  end

  if move != 2 && move != 4
    return true if arr.include?(9) && arr.include?(8) && arr.include?(7)

    return true if arr.include?(9) && arr.include?(6) && arr.include?(3)

  end

  if move != 1 && move != 3 && move != 7 && move != 9
    return true if arr.include?(2) && arr.include?(8) && arr.include?(5)

    return true if arr.include?(4) && arr.include?(6) && arr.include?(5)

  end
  false
end

instructions = "1.The game is played on a 3x3 grid.\n
2. One player is X, the other is O.\n
3. Player take turns to input a no. between (1-9) to mark one of the empty squares.\n
4. The first player to get 3 marks in a row (up, down, across, or diagonally) is the winner.\n
5. If none of the players win and all 9 squares are filled the game is a draw"

p1_arr = []
p2_arr = []
game_ctr = 0
brd = Board.new



puts "xoxoxoxoxoxo Welcome to the Game of Tic-Tact-Toe  xoxoxoxoxoxo\n\n"
puts "               Game Instructions\n\n"
puts instructions + "\n\n"
puts "\n3x3 Grid\n"
(1..9).each do |i|
  print " #{i} "
  print '|' unless (i % 3).zero?
  puts "\n" if (i % 3).zero?
end
puts "\nWhat the grid may look like when there is a winner\n"
(1..9).each do |i|
  print ' X ' if i <= 3
  print " #{i} " if i > 3
  print '|' unless (i % 3).zero?
  puts "\n" if (i % 3).zero?
end
puts "\nWhat the grid may look like when there is a draw\n"

print "  X  O  X\n"
print "  O  X  O\n"
print "  O  X  O\n"

print "\nWant to play the game (y/n)? = "
want_to_play = gets.chomp.capitalize

while want_to_play == 'Y'
  p1_arr = []
  p2_arr = []
  game_ctr = 0
  flag = 0
  while flag.zero?
    print "\nPlayer 1 choose your symbol (O / X) = "
    p1_sym = gets.chomp.capitalize
    flag = 1 if %w[O X].include?(p1_sym)
    puts "\nInvalid symbol. Choose again\n" if flag.zero?
  end

  p2_sym = p1_sym == 'X' ? 'O' : 'X'
  puts "\nPlayer 2 your symbol is = " + p2_sym

  while game_ctr < 5

    flag = 0
    while flag.zero?
      print "\nPlayer 1 make your move = "
      p1_move = gets.chomp

      if validmove(p1_move.to_i, p1_arr, p2_arr)
        flag = 1
      else
        puts "\nThat was an Invalid Move. Input move again\n"
      end

    end

    p1_arr.push(p1_move.to_i)

    
    brd.print_board(p1_sym, p2_sym, p1_arr, p2_arr)

    if checkwin(p1_move.to_i, p1_arr)
      puts "\nPlayer1 CONGRATULATIONS!!! you are the WINNER\n"
      break
    end

    if game_ctr == 4
      puts "\nThe game is a draw and no one wins\n"
      break
    end

    flag = 0
    while flag.zero?
      print "\nPlayer 2 make your move = "
      p2_move = gets.chomp
      if validmove(p2_move.to_i, p1_arr, p2_arr)
        flag = 1
      else
        puts "\nThat was an Invalid Move. Input move again\n"
      end
    end

    p2_arr.push(p2_move.to_i)

    
    brd.print_board(p1_sym, p2_sym, p1_arr, p2_arr)

    if checkwin(p2_move.to_i, p2_arr)
      puts "\nPlayer2 CONGRATULATIONS!!! you are the WINNER\n"
      break
    end

    game_ctr += 1

  end
  print "\nWant to play again (y/n)? = "
  want_to_play = gets.chomp.capitalize

end

puts "\n \nThank you for playing the Game"

# rubocop:enable Metrics/BlockNesting
# rubocop:enable Metrics/CyclomaticComplexity
# rubocop:enable Metrics/PerceivedComplexity
